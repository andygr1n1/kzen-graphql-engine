# postgres
POSTGRES_PASSWORD=grini
POSTGRES_USER=postgres
PGDATA=/var/lib/postgresql/data/pgdata

# graphql-engine
## postgres database to store Hasura metadata
HASURA_GRAPHQL_METADATA_DATABASE_URL=postgres://postgres:grini@postgres:5432/postgres
# this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
PG_DATABASE_URL=postgres://postgres:grini@postgres:5432/postgres
# enable the console served by server
HASURA_GRAPHQL_ENABLE_CONSOLE=true # set to "false" to disable console
# enable debugging mode. It is recommended to disable this in production
HASURA_GRAPHQL_DEV_MODE=true
HASURA_GRAPHQL_ENABLED_LOG_TYPES=startup,http-log,webhook-log,websocket-log,query-log
# uncomment next line to run console offline (i.e load console assets from server instead of CDN)
# HASURA_GRAPHQL_CONSOLE_ASSETS_DIR=/srv/console-assets
# uncomment next line to set an admin secret
# HASURA_GRAPHQL_ADMIN_SECRET=myadminsecretkey
HASURA_GRAPHQL_ADMIN_SECRET=grini
HASURA_GRAPHQL_JWT_SECRET={"type": "HS256", "key": "EiunNL3hbmBb6k6oYrRjeYSZ8ko_Vy9Elzpt-vc78se_DpYUK8bw1JNn4hA8Z1sx","claims_map": { "x-hasura-allowed-roles":{"path":"$$.allowed-roles"}, "x-hasura-default-role":{"path":"$$.role"}, "x-hasura-user-id":{"path":"$$.id"} } }
DATABASE_URL=postgres://cmfedroyqtfnkp:grini@postgres:5432/public
DATABASE_URL_KZEN=postgres://cmfedroyqtfnkp:grini@postgres:5432/kzen
AUTO_RITUALIZE_GOALS_URL=http://host.docker.internal:8008/kzen/auto-ritualize-goals
HEROKU_NODE_ORIGIN=http://host.docker.internal:8008
# docker internal is going to redirect to machine localhost
DESTROY_KZEN_OUTDATED_ARTIFACTS_URL=http://host.docker.internal:8008/kzen/destroy-data
